[{"categories":["部落格架站教學"],"contents":" 官方文件教學\n目錄可以讓讀者快速瀏覽文章架構，並找到所需資訊，還能優化 SEO、提升使用者體驗\n本文將介紹如何使用 Hugo 內建的變數來生成目錄，並自定義所需內容，提升文章的結構性與可讀性，優化閱讀體驗\n一、啟用 Hugo 內建目錄功能 Hugo 提供內建的變數來自動生成目錄\n只要在文章範本加上 {{ .TableOfContents }} 變數即可啟用\n每個 Hugo 主題的文章範本可能位於不一樣的地方\n以這個部落格為例，我們使用的主題是 Liva-Hugo，文章範本位於 layouts/_default/single.html\n參考程式碼如下：\n\u0026lt;aside class=\u0026#34;toc\u0026#34;\u0026gt; \u0026lt;h2\u0026gt;目錄\u0026lt;/h2\u0026gt; {{ .TableOfContents }} \u0026lt;/aside\u0026gt; 二、設定目錄的標題層級與格式 Hugo 目錄預設會從 h2 開始，顯示到 h3\n若想更改顯示的標題層級，可於 Hugo 的 config.toml 中調整\n像是這邊習慣以 h3 當作內文的主標題，h4 當副標題，因此程式碼會呈現如下：\n[markup] [markup.tableOfContents] startLevel = 3 // 從 h3 標題開始列入目錄 endLevel = 4 // 列到 h4 為止 ordered = true //是否使用有序列表 圖 2 目錄之標題層 三、在文章中使用標題層級 Hugo 的目錄會自動根據 Markdown 的標題層級生成\n### h3 標題（主標題） #### h4 標題（副標題） 圖 3 Markdown 的標題層級 四、自訂樣式 以下為此部落格使用之目錄樣式\naside.toc { background-color: #FFFFFB; border: 2px solid #f7bf57; border-radius: 5px; padding: 1rem; ul li { \u0026amp;::before { content: \u0026#34;\u0026#34;; /* 移除 Hugo 主題可能自帶的 icon 或數字符號*/ } a { display: block; line-height: 2; color: #434243; } } } 圖 4 目錄樣式 五、針對特定文章啟用 / 停用目錄功能 若是有些文章段落較短，或偏隨筆日誌，不太需要目錄功能的話，可以在文章中的 Front Matter 中進行設定\nFront Matter 是在 Markdown 文件開頭的設定區塊，在 Hugo 架站步驟 這篇文章中，我們提到文章開頭需要撰寫以下設定：\n--- title: \u0026#34;標題\u0026#34; date: 日期（2024-04-28） draft: 是否為草搞（true/false） image: \u0026#34;圖片網址\u0026#34; --- 這個區塊就是 Front Matter\n而我們可以在這個區塊加上 toc 參數，來決定是否要啟用目錄功能\n但若是使用的部落格主題沒有支援 toc 參數，則需要自行修改模板\nLiva Hugo 沒有此參數，故我們要先新增目錄參數才能使用它\n在前面段落提到的啟用目錄功能中，將程式碼增加 if 判斷是否要啟用或停用目錄：\n{{ if .Params.toc }} \u0026lt;aside class=\u0026#34;toc\u0026#34;\u0026gt; \u0026lt;h2 class=\u0026#34;text-center\u0026#34;\u0026gt;目錄\u0026lt;/h2\u0026gt; {{ .TableOfContents }} \u0026lt;/aside\u0026gt; {{ end }} 之後就可以在 Front Matter 設定\ntoc: true / false 六、結語 會使用到這個功能主要是因為在整理網站作品集時發現文章內容好長\n如果沒有目錄，會降低我的閱讀意願\n在實作過程中，沒有遇到太大的問題，若大家有其它心得，歡迎分享～\n","permalink":"https://skar5268.github.io/blog/%E5%9C%A8-hugo-%E9%83%A8%E8%90%BD%E6%A0%BC%E4%B8%AD%E5%AF%A6%E4%BD%9C%E6%96%87%E7%AB%A0%E7%9B%AE%E9%8C%84%E5%8A%9F%E8%83%BD/","tags":null,"title":"在 Hugo 中實作文章目錄功能"},{"categories":["部落格架站教學"],"contents":" Hugo 官網 / Hugo 主題\n本部落格使用的主題：Liva Hugo\n一、環境建置 安裝 Hugo\n在官方文件 \u0026gt; Prebuilt binaries 找到最新版本連結，下載後解壓縮留下 hugo.exe\n下載主題\n下載檔案 解壓縮取出 exampleSite 資料夾 在 exampleSite 資料夾新增一個資料夾 themes 把剛剛主題解壓縮的資料夾 liva-hugo-master 移到 themes 將 hugo.exe 移到 exampleSite 運行 Hugo\n開啟 cmd \u0026gt; 輸入 hugo server \u0026gt; 點擊網址運行\n關閉 Hugo\nctrl+C 停止 hugo 程式 直接關掉命令提示字元 二、部落格基本設定 部落格基本資料於 config.toml 修改，以本部落格為例\ndefault configuration baseURL = \u0026#34;https://skar5268.github.io\u0026#34; languageCode = \u0026#34;zh-TW\u0026#34; title = \u0026#34;阿若（Michelle）\u0026#34; navigation\ndefault parameters\nlogo = \u0026#34;images/logo.png\u0026#34; home = \u0026#34;Home\u0026#34; # Meta data description = \u0026#34;程式筆記 / 旅遊紀錄\u0026#34; author = \u0026#34;阿若\u0026#34; # Google Analitycs googleAnalitycsID = \u0026#34;Your ID\u0026#34; # Contact Information # mobile = \u0026#34;0124857985320\u0026#34; email = \u0026#34;skar5268@gmail.com\u0026#34; location = \u0026#34;Taiwan\u0026#34; # copyright copyright = \u0026#34;copyright \u0026amp;copy; 2024 阿若 All Rights Reserved\u0026#34; news letter enable = false social site 圖片存放位置\nstatic\\images\n修改關於我\ncontent\\about\\_index.md\n三、寫文章 部落格文章存放於 contene\\blog，需使用 Markdown 語法 撰寫\n相關工具：typora\n文章設定\n--- title: \u0026#34;標題\u0026#34; date: 日期（2024-04-28） draft: 是否為草搞（true/false） image: \u0026#34;圖片網址\u0026#34; # meta description description: \u0026#34;文章簡短介紹\u0026#34; categories: - \u0026#34;分類\u0026#34; tags: -\u0026#34;標籤\u0026#34; # type type : \u0026#34;post\u0026#34; --- ShortCodes\n官方文件\nYoutube /*不要斷行*/ {{ \u0026lt; youtube 0RKpf3rK57I \u0026gt; }} Twitter /*不要斷行*/ {{ \u0026lt; twitter user=\u0026#34;github\u0026#34; id=\u0026#34;1868349116540915923\u0026#34; \u0026gt; }} “I wish GitHub Copilot Chat could edit files directly!”\nIt CAN ✨https://t.co/OaAincSVf3 pic.twitter.com/kSRGAscBMN\n\u0026mdash; GitHub (@github) December 15, 2024 Instagram /*不要斷行*/ {{ \u0026lt; instagram DDiDJNmvDVM \u0026gt; }} View this post on Instagram 四、發佈於 Github Pages 上 創建新的 repository\nRespository name：Github 帳號.github.io\n使用 Hugo 產生出個人網站的程式碼\n開啟終端機，輸入 hugo Hugo 產生的程式碼會放在 exampleSite/public 將 public 資料夾複製到 Github 資料夾下 創建 commit，Publish branch ","permalink":"https://skar5268.github.io/blog/hugo-%E6%9E%B6%E7%AB%99%E6%AD%A5%E9%A9%9F/","tags":null,"title":"Hugo 架站步驟"},{"categories":["平面設計作品"],"contents":"","permalink":"https://skar5268.github.io/blog/%E6%B5%B7%E5%A0%B1%E8%A8%AD%E8%A8%88/","tags":[""],"title":"海報設計"},{"categories":["平面設計作品"],"contents":"","permalink":"https://skar5268.github.io/blog/%E7%A4%BE%E7%BE%A4%E5%9C%96%E7%89%87/","tags":[""],"title":"社群圖片"},{"categories":["常用語法"],"contents":"// http://meyerweb.com/eric/tools/css/reset/ // v2.0 | 20110126 // License: none (public domain) html, body, div, span, applet, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, pre, a, abbr, acronym, address, big, cite, code, del, dfn, em, img, ins, kbd, q, s, samp, small, strike, strong, sub, sup, tt, var, b, u, i, center, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, table, caption, tbody, tfoot, thead, tr, th, td, article, aside, canvas, details, embed, figure, figcaption, footer, header, hgroup, menu, nav, output, ruby, section, summary, time, mark, audio, video margin: 0 padding: 0 border: 0 font-size: 100% font: inherit vertical-align: baseline /* HTML5 display-role reset for older browsers */ article, aside, details, figcaption, figure, footer, header, hgroup, menu, nav, section display: block body line-height: 1 ol, ul list-style: none blockquote, q quotes: none blockquote:before, blockquote:after, q:before, q:after content: \u0026#39;\u0026#39; content: none table border-collapse: collapse border-spacing: 0 *, *::before, *::after box-sizing: border-box a display: block text-decoration: none img display: block object-fit: cover height: auto max-width: 100% ","permalink":"https://skar5268.github.io/blog/css-reset/","tags":null,"title":"CSS Reset"},{"categories":["常用語法"],"contents":"Pug .carousel h2.container-title 精選文章 .carousel-cards .carousel-card a(href=\u0026#34;#\u0026#34;) img(src=\u0026#34;../img/article-image1.png\u0026#34; alt=\u0026#34;Vision Pro 登場！Vision Pro UI/UX 設計重點大公開 (上)\u0026#34;) h3 Vision Pro 登場！Vision Pro UI/UX 設計重點大公開 (上) .content span.tag UI/UX 新知 span.date 2024/02/10 .carousel-card a(href=\u0026#34;#\u0026#34;) img(src=\u0026#34;../img/article-image2.png\u0026#34; alt=\u0026#34;給設計師和工程師的 Figma-Dev Mode 開發模式使用指南 (下)\u0026#34;) h3 給設計師和工程師的 Figma-Dev Mode 開發模式使用指南 (下) .content span.tag UI/UX 新知 span.date 2023/11/20 .carousel-card a(href=\u0026#34;#\u0026#34;) img(src=\u0026#34;../img/article-image3.png\u0026#34; alt=\u0026#34;給設計師和工程師的 Figma-Dev Mode 開發模式使用指南 (上)\u0026#34;) h3 給設計師和工程師的 Figma-Dev Mode 開發模式使用指南 (上) .content span.tag UI/UX 新知 span.date 2023/10/18 .carousel-card.d-sm-none a(href=\u0026#34;#\u0026#34;) img(src=\u0026#34;../img/article-image1.png\u0026#34; alt=\u0026#34;Vision Pro 登場！Vision Pro UI/UX 設計重點大公開 (上)\u0026#34;) h3 Vision Pro 登場！Vision Pro UI/UX 設計重點大公開 (上) .content span.tag UI/UX 新知 span.date 2024/02/10 .carousel-card.d-sm-none a(href=\u0026#34;#\u0026#34;) img(src=\u0026#34;../img/article-image2.png\u0026#34; alt=\u0026#34;給設計師和工程師的 Figma-Dev Mode 開發模式使用指南 (下)\u0026#34;) h3 給設計師和工程師的 Figma-Dev Mode 開發模式使用指南 (下) .content span.tag UI/UX 新知 span.date 2023/11/20 .carousel-card.d-sm-none a(href=\u0026#34;#\u0026#34;) img(src=\u0026#34;../img/article-image3.png\u0026#34; alt=\u0026#34;給設計師和工程師的 Figma-Dev Mode 開發模式使用指南 (上)\u0026#34;) h3 給設計師和工程師的 Figma-Dev Mode 開發模式使用指南 (上) .content span.tag UI/UX 新知 span.date 2023/10/18 .carousel-dots .dot .dot .dot .dot .dot Sass .carousel max-width: 1296px margin: 0 auto padding: 120px 0 overflow: hidden .carousel-cards display: flex @include smscreen flex-direction: column margin: 0 12px .carousel-card flex:0 0 30% margin-right: 5% transform: translateX(0) transition: transform 1s @include pad flex:0 0 48% margin: 1% @include smscreen flex:0 0 98% a color: $primary margin-bottom: 40px img border-radius: 8px margin-bottom: 16px h3 padding: 0 8px font-size: 20px line-height: 24px margin-bottom: 16px font-weight: bold .content padding: 0 8px display: flex justify-content: space-between .tag padding: 4px 12px border-radius: 16px background-color: $light-white color: $primary margin-right: 16px .date color: $secondary .carousel-dots max-width: 124px margin: 0 auto display: flex justify-content: space-between @include smscreen display: none .dot width: 10px height: 10px background-color: #E9E9E9 border-radius: 50% \u0026amp;:hover cursor: pointer JS const carouselCards = document.querySelector(\u0026#34;.carousel-cards\u0026#34;) const carouselCard = document.querySelectorAll(\u0026#34;.carousel-card\u0026#34;) const dot = document.querySelectorAll(\u0026#34;.dot\u0026#34;) let num = 0; if (diWidth \u0026gt; 375 \u0026amp;\u0026amp; dot[0] \u0026amp;\u0026amp; carouselCards) { for (d = 0; d \u0026lt; dot.length; d++) dot[d].dataset.num = d dot.forEach(function (item) { item.addEventListener(\u0026#34;click\u0026#34;, function (e) { let active = e.target.dataset.num num = active - 1 changeCard() }); }); dot[0].style.backgroundColor = \u0026#34;#000000\u0026#34;; let interval = setInterval(changeCard, 2500); } ","permalink":"https://skar5268.github.io/blog/%E5%9C%96%E7%89%87%E8%BC%AA%E6%92%AD/","tags":["Swiper"],"title":"圖片輪播"},{"categories":["javascript"],"contents":" 成品\n其實我現在還是不太懂時間角度的算法，數學都還給老師ㄌ。 因此試著紀錄看看，說不定會比較能理解？\n一、首先需要一個時鐘，並設定秒針、時針、分針樣式 這邊直接拿教材使用，所以沒什麼好講解ㄉ\n二、取得時間 const now = new Date(); /*取得現在時間*/ const seconds = now.getSeconds(); // 取得秒鐘 const minutes = now.getMinutes(); // 取得分鐘 const hours = now.getHours(); // 取得小時 三、取得秒針、分針、時針的角度 let secondsDegrees = seconds / 60 * 360 + 90; let minutesDegrees = (minutes / 60) * 360 + 90 + ((seconds / 60) * (360 / 60)); let hoursDegrees = (hours / 12) * 360 + 90 + ((minutes / 60) * (360 / 12)); 秒針角度： 秒針走一圈是 60 秒，因此秒鐘 / 60 = 秒針所在的位置。 由於時鐘是圓形的，且時鐘的起點是 90 度，所以秒針的角度為秒針所在的位置 * 360 後再 + 90。\n分針角度： 分針走一圈是 60 分鐘，因此分鐘 / 60 = 分針所在的位置。 由於時鐘是圓形的，且時鐘的起點是 90 度，所以分針的角度為分針所在的位置 * 360 後再 + 90。 然而秒針也會影響分針的角度，秒針走一圈，分針會走一格（一分鐘）。換句話說， 分針一秒鐘會移動 1 度。 因此實際分針的角度為：先前所得出的分針角度 + 秒數\n時針角度： 時針走一圈是 12 小時，因此小時 / 12 = 時針所在的位置。 由於時鐘是圓形的，且時鐘的起點是 90 度，所以時針的角度為時針所在的位置 * 360 後再 + 90。 然而分針也會影響時針的角度，分針走一圈，時針會走一格（一小時）。換句話說， 時針一分鐘會移動 0.5 度。 因此實際時針的角度為：先前算出的角度 + 分鐘 * 0.5\n簡化後程式碼：\nlet secondsDegrees = (seconds / 60) * 360 + 90; let minutesDegrees = (minutes / 60) * 360 + 90 + seconds; let hoursDegrees = (hours / 12) * 360 + 90 + (minutes * 0.5); 四、取得 DOM，並給予他們樣式（目前時間的角度） const secondHand = document.querySelector(\u0026#39;.second-hand\u0026#39;); const minHand = document.querySelector(\u0026#39;.min-hand\u0026#39;); const hourHand = document.querySelector(\u0026#39;.hour-hand\u0026#39;); secondHand.style.transform = `rotate(${secondsDegrees}deg)`; minHand.style.transform = `rotate(${minutesDegrees}deg)`; hourHand.style.transform = `rotate(${hoursDegrees}deg)`; 五、設定秒、分、時針每秒移動的角度 function setDate() { hoursDegrees = hoursDegrees + 360 / (12 * 60 * 60); // 一秒鐘移動 1/120 度 minutesDegrees = minutesDegrees + 360 / (60 * 60); // 一秒鐘移動 1 度 secondsDegrees = secondsDegrees + 360 / 60; // 一秒鐘移動 6 度 secondHand.style.transform = `rotate(${secondsDegrees}deg)`; minHand.style.transform = `rotate(${minutesDegrees}deg)`; hourHand.style.transform = `rotate(${hoursDegrees}deg)`; } 簡化後程式碼\nfunction setDate() { hoursDegrees = hoursDegrees + 1/120; minutesDegrees = minutesDegrees + 1; secondsDegrees = secondsDegrees + 6; secondHand.style.transform = `rotate(${secondsDegrees}deg)`; minHand.style.transform = `rotate(${minutesDegrees}deg)`; hourHand.style.transform = `rotate(${hoursDegrees}deg)`; } 六、執行函式 setInterval(setDate, 1000) ","permalink":"https://skar5268.github.io/blog/js-clock/","tags":["JS 30"],"title":"JS Clock"},{"categories":["部落格架站教學"],"contents":" Hexo 起源 / Hexo 官網 一、環境建置 安裝 Node.js\n安裝 Git\n確認是否安裝成功\nnode -v npm -v git --version 安裝 Hexo npm install -g hexo-cli 建立平台 hexo init 部落格資料夾名稱 二、部落格文章 建立部落格文件 hexo new \u0026#39;部落格文章名稱\u0026#39; 使用 Markdown 語法 撰寫文章\ntitle 為文章標題\n三、其餘指令說明 於本機打開部落格預覽 hexo server 部署至網頁的資料夾 hexo generate 清除快取 hexo clean 將部落格部屬到 Github Pages hexo deploy 新增部落格頁面 hexo new page 頁面名稱 輸入指令後，將於 source 資料夾內新增頁面名稱的資料夾\n四、部落格相關設定 部落格基本資料 於 themes \u0026gt; config.yml 修改，以本部落格為例 title: 阿若的 Hexo 部落格 subtitle: Hexo 部落格 description: 還不知道要放什麼東西 keywords: author: 阿若 language: zh-TW timezone: \u0026#39;\u0026#39; 部落格客製化 安裝客製化樣板 git clone --depth 1 https://github.com/hexojs/hexo-theme-landscape themes/landscape themes 資料夾內將新增 landscape 資料夾 在 landscape \u0026gt; source \u0026gt; config.yml 可以修改 menu 等資料 五、部屬到 GitHub 上 將 VS code 綁定 GitHub 帳戶 在 GitHub 上 create new repository 在 GitHub Pages 上部署 Hexo npm install hexo-deployer-git --save 在資料夾最上層的 config.yml 檔案中，滑到最下面的 deploy 區塊（第 103 行），將下面程式碼貼上去 deploy: type: git repo: https://github.com/\u0026lt;username\u0026gt;/\u0026lt;project\u0026gt; # example, https://github.com/hexojs/hexojs.github.io branch: gh-pages 於同樣的 config.yml 檔案中找到 URL（第 16 行），修改網址為自己的 教學連結 清除快取 \u0026amp; 將部落格部屬到 Github Pages hexo clean \u0026amp;\u0026amp; hexo deploy 確認 GitHub pages 是否成功顯示\n套用其他模板\n安裝模板後，於資料夾最上層的 config.yml 檔案中，第 99 行 theme 改成安裝的模板\n","permalink":"https://skar5268.github.io/blog/hexo-%E6%9E%B6%E7%AB%99%E6%AD%A5%E9%A9%9F/","tags":null,"title":"Hexo 架站步驟"},{"categories":["WebsiteWorks"],"contents":"DEMO ","permalink":"https://skar5268.github.io/blog/%E4%BD%9C%E5%93%81%E9%9B%86-03/","tags":["HTML","CSS"],"title":"履歷表"},{"categories":["WebsiteWorks"],"contents":" 此網站整合了同意書、教材、測驗和問卷，藉此收集研究所需數據。為研究者提供穩定的實驗環境，同時提升受試者的使用體驗。是一項用於碩論實驗的研究工具\n一、基本介紹 網頁連結： https://skar5268.github.io/PaperExperiment/\n核心功能： 完整實驗流程、隨機化實驗教材、收集實驗數據\n目標受眾： 臺灣的大學生與碩士生，年齡分佈於 18 歲至 28 歲之間\n設計理念： 讓受試者能在單一網站上完成所有實驗流程，避免分頁切換帶來的認知負荷，維持實驗環境的一致性，並優化使用者體驗\n網頁語法： HTML、CSS（SCSS）、JavaScript\n我們透過實驗網站來收集研究數據，為研究者提供穩定的實驗環境，同時提升受試者的使用體驗。\n對於研究者而言，網站整合了四份教材，採用 JavaScript 生成隨機亂數，以確保每位受試者的學習順序皆不相同，避免閱讀順序對實驗結果產生影響。這些隨機數將儲存在 localStorage 中，來維持受試者在同一次實驗中的順序一致性，防止因重新整理或中斷操作而改變順序，藉此提升數據的穩定性。\n在受試者方面，網站採用了簡約風格設計，並將指引按鈕置於顯眼的位置，使流程操作清楚易懂。此外，實驗流程統整於單一網站上的設計，有助於減少操作時的分心，讓受試者能專注於完成實驗。藉由 CSS 搭配 JavaScript 設計的進度條，受試者更能明確掌握實驗進度，增加安心感與可預期性，進而提升參與過程中的專注度。\n二、使用者體驗 1. 使用者角色與目標 使用者： 實驗受試者\n目標：\n快速理解實驗流程 流暢完成所有步驟，減少中斷或錯誤 提供回饋，順利結束實驗 2. 使用者旅程 A. 進入網站，閱讀指引：\n受試者能清楚看到「填寫研究參與者知情同意書」按鈕，輕鬆開始實驗\n設計重點：首頁簡潔、按鈕清楚，避免受試者迷惘\nB. 依指引完成每個步驟\n受試者依序完成知情同意書、測驗、教材學習及問卷等\n設計重點：透過「進度條」、「步驟顯示」及「下一步的按鈕」提升掌控感，減少焦慮\nC. 確認完成並離開網站\n完成實驗後，系統顯示「感謝您參與實驗」的訊息和「結束」按鈕\n設計重點：清楚的標示完成，避免受試者以為實驗尚未結束\n3. 結論 簡化介面，讓受試者對接下來的操作一目瞭然，避免過多資訊造成混亂\n透過步驟引導及標示功能，確保每位受試者都能理解並順利完成實驗\n三、各頁面詳細介紹 1. 首頁──簡潔直觀的實驗入口 介面簡潔，只放「實驗標題」和「按鈕」，讓受試者清楚知道要點選按鈕來進行下一步\n點選「填寫研究參與者知情同意書」按鈕後即可前往下一個頁面\n2. 研究參與者知情同意書──權益保障與實驗倫理 為了保障受試者權益，我們設計了知情同意書，確保每位參與者都能了解自己的權利與義務\n我們嵌入了 SurveyCake 問卷，並在問卷結束後的按鈕加上網頁連結，讓受試者可前往下一個步驟\n3. 學習成效前測──知識評估與進度指引 實驗正式開始後，於頁面頂端加入進度條，讓受試者可以知道目前的實驗進度\n為了收集學習前後的成效差異，我們設計了問卷收集數據，一樣使用 SurveyCake\n前測完成後，點擊問卷內的按鈕即可進入下一步\n4. 教材使用說明──實驗指引與順序隨機化 向受試者說明實驗教材的使用方式及注意事項\n點選「開始實驗」按鈕後，會隨機進入教材版本（共有 4 個版本），並將隨機數紀錄在 localStorage 中\n5. 教材範例──核心學習內容展示 教材為兩張圖卡，內容圖文並茂，受試者可透過圖卡快速掌握教材重點\n圖卡最下方設置按鈕，讓受試者學習完後可直接點擊按鈕進入下一步驟\n6. 學習成效後測──成效評估與數據收集 為了收集學習後的學習成效，我們設計此問卷收集數據\n後測完成後，點擊按鈕可進入「完成此階段學習」頁面\n7. 完成此階段學習──階段性引導與數據更新 點擊「前往下一步」按鈕時，會讀取並更新 localStorage 的資料，自動將受試者導向下一版本的教材\n完成 4 個階段的學習後，點擊按鈕則會進入實驗的下一個階段\n8. 學習情緒量表填答說明──情緒量表前置指引 向受試者講解學習情緒量表\n將「開始填寫量表」按鈕置於中間，讓受試者可以直觀點選進入下一步\n9. 學習情緒量表──多教材情緒體驗比較 將四份教材的情緒量表置於同一頁，方便受試者比較不同教材的差異\n下一步的按鈕置於量表下方，讓受試者可以直接點擊\n10. 回饋問卷──質性資料收集 收集質性資料，讓實驗資料更加豐富\n完成後，點擊按鈕可進入「實驗完成」頁面\n11. 實驗完成──明確結束與環境作業清理 此頁面明確告知實驗完成，並設計了「結束」按鈕，點擊後將清除 localStorage 的資料，確保下一位受試者可以在全新的實驗環境下受測，避免資料混淆\n四、技術實現 本網站採用 HTML、CSS、JavaScript 技術進行開發。\n我們選擇了 SCSS 以提升維護性，降低樣式維護成本，並透過變數來管理配色，確保風格統一，減少日後修改時的混亂。另外，網站開發時也使用了 localStorage 確保資料穩定性，避免受試者在誤觸重新整理鍵後，隨機順序重新洗牌。\n1. 使用技術 HTML： 使用語義化標籤，確保實驗流程結構清晰，操作步驟井然有序 CSS（SCSS）： 運用 SCSS 來管理樣式，採用變數管理顏色，確保整體視覺風格一致，並提升設計的可維護性 JavaScript： 負責儲存實驗進度以及提升網站的互動性，確保受試者在同一次實驗中的學習順序保持不變 2. 技術亮點 隨機順序機制： 採用 JavaScript 的 Math.random() 生成隨機順序，並將結果儲存在 localStorage 中，以確保受試者的順序在同一次實驗中保持不變，避免因重新整理或中斷操作而改變順序，確保數據的穩定性\n流程引導機制： 藉由按鈕點擊事件觸發變數變動，根據變數狀態動態導向下一步實驗流程，確保操作順暢且直覺。即使是不熟悉網頁操作的使用者，也能確保他們順利完成每個步驟\n進度條設計： 結合 SCSS 與 JavaScript，當受試者完成步驟時，系統會觸發事件重新渲染進度條。讓受試者能清楚地掌握實驗進度，提升參與過程中的安心感與可預期性\n設計風格統一化： 採用同樣的按鈕樣式與配色，並客製化 Scrollbar 樣式，確保視覺風格一致，提升使用者介面的整體性\nQR Code 縮放機制： 使用 JavaScript 的 toggle 功能設計點擊縮放機制，避免 QR Code 影響閱讀，讓受試者在需要時可快速使用\n五、結語 這個網站是我在撰寫碩士論文時所設計的，主要用於蒐集論文所需的實驗數據。\n原本想研究網頁設計相關主題，卻發現大部分的題目都有人探討過了，故改往 AR 方向研究。\n不過因為真的很喜歡寫網頁，不想放棄任何寫網頁的機會，所以指導教授建議可以把實驗設計成網頁形式，於是誕生了這個網站！\n回想起來，撰寫這個網站的過程大概是論文階段最快樂的事情 XD\n當時除了希望實驗可以在單一網站完成外，還想確保受試者可以清楚知道如何進行實驗、自己處於實驗的哪個階段。\n因此網站的設計特別強調清楚簡單的操作引導和直覺的進度顯示。\n由於實驗過程以電腦為主，手機則負責掃描 QR Code 來體驗 AR，因此網站沒有特別設計響應式。\n進度條是我很喜歡的一個部分，也有受試者稱讚過，當下超級開心～\n進度條的樣式清楚標示了「已完成」、「進行中」和「待完成」的狀態，讓受試者不用擔心迷失在實驗中。\n這邊搭配了 JavaScript 來記錄使用者的進度，確保整體的連貫性與流暢度。\n網站本身的開發過程相對順利，反而是在 SurveyCake 上遇到不少困難。當時問卷後台的操作對我來說不是很直覺。\n未來，若有機會接觸類似的網站開發，有幾項功能會想嘗試研究看看，讓整體體驗更完整：\n1. 架設問卷系統：取代一般的問卷平台，減少嵌入外部程式碼的限制，提供更一致性的使用者體驗\n2. 新增研究者後台：讓研究者可以即時查看實驗進度和初步結果，隨時掌握實驗情況\n3/16/2025 後記\n重新回顧整個網站，發現很多可以改進的地方\n介面設計雖然簡潔，但按鈕的部分感覺可以設計得更有質感一點？\n進度條也可以設計得更細節，例如：每個步驟之間的線條再切割成三個區塊\n「進行中」是用黃色標記，若是閱讀完該版本教材後，後方線條的第一區塊可以變成黃色；做完測驗後，線條的第二區塊再變成黃色。這樣或許會讓使用者更有向前一步的成就感？\n另外，這幾個頁面：教材使用說明、完成此部分教材、學習情緒量表填答說明也可以增加進度條\n最後，實驗完成頁面也許可以設計得更有趣一點～\n畢竟好不容易完成實驗了，希望可以讓受試者會心一笑，感受到研究者的真心感謝與恭喜完成的祝賀！\n","permalink":"https://skar5268.github.io/blog/%E4%BD%9C%E5%93%81%E9%9B%86-04/","tags":["HTML","CSS","JS"],"title":"一站式學術實驗平台"},{"categories":["WebsiteWorks"],"contents":"DEMO ","permalink":"https://skar5268.github.io/blog/%E4%BD%9C%E5%93%81%E9%9B%86-02/","tags":["JavaScript"],"title":"高雄旅遊網站"},{"categories":["WebsiteWorks"],"contents":"DEMO 簡介 設計稿為「2020 六角學院前端工程師學習體驗營」所提供的版型，以 Bootstrap4 切版，包含響應式、漢堡選單、Modal 等設計。\n","permalink":"https://skar5268.github.io/blog/%E4%BD%9C%E5%93%81%E9%9B%86-01/","tags":["Bootstrap4"],"title":"d'Perfume"}]